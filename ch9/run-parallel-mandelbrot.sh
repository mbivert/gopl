#!/bin/sh

set -e

for s in 1024 2048; do
	for x in 10 50 100 200 400 1000 2000 3000 5000; do
		for m in 1 2 3 4; do
			printf "%-2d %-6d %-6d %-6d " $m $s $s $x
			GOMAXPROCS=$m go run ../ch8/parallel-mandelbrot.go -width $s -height $s -ngo $x > t3.png
		done
	done
done

cat <<EOF >/dev/null
It seems that the more processors we have, the better
things get, regardless of the number of goroutines.

Sample run:
	1  1024   1024   10     1.146061118s
	2  1024   1024   10     573.854605ms
	3  1024   1024   10     534.293473ms
	4  1024   1024   10     505.303545ms

	1  1024   1024   50     1.118378686s
	2  1024   1024   50     850.082736ms
	3  1024   1024   50     546.460805ms
	4  1024   1024   50     504.481732ms

	1  1024   1024   100    1.060406734s
	2  1024   1024   100    564.894052ms
	3  1024   1024   100    513.359228ms
	4  1024   1024   100    414.20972ms

	1  1024   1024   200    1.080887922s
	2  1024   1024   200    699.912464ms
	3  1024   1024   200    456.359929ms
	4  1024   1024   200    400.377615ms

	1  1024   1024   400    1.078819307s
	2  1024   1024   400    429.833729ms
	3  1024   1024   400    403.318151ms
	4  1024   1024   400    262.258646ms

	1  1024   1024   1000   1.068589668s
	2  1024   1024   1000   5.911364ms
	3  1024   1024   1000   6.378944ms
	4  1024   1024   1000   5.556457ms

	1  1024   1024   2000   1.086182066s
	2  1024   1024   2000   3.863474ms
	3  1024   1024   2000   13.031567ms
	4  1024   1024   2000   4.083641ms

	1  1024   1024   3000   1.085086621s
	2  1024   1024   3000   4.193394ms
	3  1024   1024   3000   4.893617ms
	4  1024   1024   3000   5.021752ms

	1  1024   1024   5000   1.08894438s
	2  1024   1024   5000   6.145162ms
	3  1024   1024   5000   6.717641ms
	4  1024   1024   5000   7.663377ms

	1  2048   2048   10     4.48337451s
	2  2048   2048   10     2.301645943s
	3  2048   2048   10     2.091857679s
	4  2048   2048   10     1.973165077s

	1  2048   2048   50     4.413075051s
	2  2048   2048   50     2.318570825s
	3  2048   2048   50     2.10957256s
	4  2048   2048   50     1.93708623s

	1  2048   2048   100    4.436335149s
	2  2048   2048   100    2.262325157s
	3  2048   2048   100    2.060712261s
	4  2048   2048   100    1.920345253s

	1  2048   2048   200    4.191727299s
	2  2048   2048   200    2.279004566s
	3  2048   2048   200    1.960067691s
	4  2048   2048   200    1.740477955s

	1  2048   2048   400    4.147515652s
	2  2048   2048   400    2.095282817s
	3  2048   2048   400    1.393106477s
	4  2048   2048   400    1.262694093s

	1  2048   2048   1000   4.177695489s
	2  2048   2048   1000   1.134295492s
	3  2048   2048   1000   1.727225433s
	4  2048   2048   1000   1.720521177s

	1  2048   2048   2000   811.284271ms
	2  2048   2048   2000   16.105039ms
	3  2048   2048   2000   15.582289ms
	4  2048   2048   2000   16.201936ms

	1  2048   2048   3000   4.134923124s
	2  2048   2048   3000   5.288044ms
	3  2048   2048   3000   4.884207ms
	4  2048   2048   3000   5.266702ms

	1  2048   2048   5000   4.200796455s
	2  2048   2048   5000   6.456799ms
	3  2048   2048   5000   7.373721ms
	4  2048   2048   5000   7.867318ms

EOF